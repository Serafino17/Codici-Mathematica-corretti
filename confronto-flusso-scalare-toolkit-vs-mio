<< SpinWeightedSpheroidalHarmonics`
 << KerrGeodesics` 
 << Teukolsky`

ScalarFluxToolkit[r0_] := (
  tot = 0;
   
   orbit = KerrGeoOrbit[0, r0, 0, 1];
  Do[
    Do[  
       mode = TeukolskyPointParticleMode[0, l, m, 0, 0, orbit];
    	
    (*Estrarre un valore specifico all'interno di "Energy"*)
    energyI = mode["Fluxes"]["Energy"]["\[ScriptCapitalI]"]; 
    energyH = mode["Fluxes"]["Energy"]["\[ScriptCapitalH]"];
    
    tot = tot + (energyI +   energyH);
    
    
    , {m, -l, l}
    	],
   {l, 1, 5}
   ];
  
  tot
  )
Log10[(1/8)*0.1*0.1*ScalarFluxToolkit[6.00000001`30]]
(1/8)*0.1*0.1*ScalarFluxToolkit[6.00000001`30]

d = 0.3;
(*Crea i dati per il grafico*)
data = Table[{1/Sqrt[k], 
    Log10[(1/8)*d*d*ScalarFluxToolkit[SetPrecision[k, 30]]]}, {k, 
    6 + (10^-9), 69.5, 3}];
			
(*Plotta i dati*)
ListPlot[data]

lmax = 5;
(*All mass values are fixed to 1*)   

M = 1.0;
mp = 1.0;

(*These are the boundaries of the domain to integrate the homogeneous \
equation(for the scalar flux)*)

rfin = 1000;
rin = 2 M + 10^-4;	

(*This function gives as output {In2,Up2}, where In2 is the squared \
modulus of the "ingoing" scalar perturbation while Up2 for the \
outgoing perturbation*)

rstar[r_] := r + 2 M Log[(r/(2 M)) - 1];

\[Delta]\[Phi]2[l_, m_, rp_, d1_] := ( 
  	
  
  \[Omega]p = Sqrt[M/rp^3];
  \[Omega] = \[Omega]p;  
  
  (* Potential V(r)*)
  pot[r_] := (1 - 2 M/r)*(l (l + 1) + (2 M/r))/r^2;
  
  eq1 = (1 - (2 M)/r)^2 D[y[r], {r, 2}] + (1 - (2 M)/r)*((2 M)/r^2)*
     D[y[r], r] + (\[Omega]^2 - pot[r]) y[r] ;
  
  (* Inward boundary conditions, a0 = 1 *) 
  a1 = ((1 + l (l + 1))/((1 - 4 M I \[Omega])*(2 M)));
  
  a2 = -((
    2 l + 3 l^2 + 2 l^3 + l^4 + 12 I M \[Omega] + 8 I l M \[Omega] + 
     8 I l^2 M \[Omega])/(
    16 M^2 (I + 2 M \[Omega]) (I + 4 M \[Omega])));
  
  
  iny[r_] := 
   Exp[- I \[Omega] rstar[r]]*(1 + a1 (r - 2 M) + a2 (r - 2 M)^2);
  
  a = iny[rin];
  b = D[iny[r], r] /. r -> rin ;
  sol1 = 
   NDSolve[{eq1 == 0, y[rin] == a, y'[rin] == b}, y, {r, rin, rfin}];
  y1[r_] := y[r] /. sol1;
  
  
  	
  (* Upward boundary conditions (b0=1) *)
  inz[r_] := 
   Exp[ I \[Omega] rstar[r]]*(1 + (I l (l + 1))/(2 \[Omega] r) + 
      1/r^2 (-((-2 l - l^2 + 2 l^3 + l^4 - 4 I M \[Omega])/(
         8 \[Omega]^2)))); 
  	
  c = inz[rfin]; 
  t = D[inz[r], r] /. r -> rfin;
  
  eq = (1 - (2 M)/r)^2 D[f[r], {r, 2}] + (1 - (2 M)/r)*((2 M)/r^2)*
     D[f[r], r] + (\[Omega]^2 - pot[r]) f[r] ; 
   
  sol2 = 
   NDSolve[{eq == 0, f[rfin] == c, f'[rfin] == t}, 
    f, {r, rin, rfin}];
  z1[r_] := f[r] /. sol2;
  
  (* Wronskian computation in r*)
  W[r_] := (1 - 2 M/r) ( D[z1[r], r] y1[r] - D[y1[r], r] z1[r]);
  (*il wronskiano Ã¨ costante*)
  
  J[r_] := - d1 mp ((4 \[Pi])/r^(3/2)) (Sqrt[r - 3 M]) LegendreP[l, m,
      0] Sqrt[(((2 l + 1) ((l - m)!))/(4 \[Pi]  ((l + m)!))) ] ;
  
  (*
  EHc0=(J[r]/W[r] z1[r])/.r->rp;
  Infc0=(EHc0   y1[r]/z1[r])/.r->rp;
  
  In1=(EHc0*y1[r])/.r->rp;
  Upp=(Infc0*z1[r])/.r->rp;
  
  *)
  
  (*Procedo col calcolo del modulo quadro delle perturbazioni*)
  
  
  In1 = ( iny[rin] z1[r] J[r] 1/W[r])  /. r -> rp;     
  
  	
  In2 = (Abs[In1])^2;
  
   Upp = (inz[rfin] y1[r] J[r] 1/W[r]) /. r -> rp ; 
  	
  Up2 = (Abs[Upp])^2;
  
  (*Restituzione di una lista con i due valori*)
  {In2, Up2}
  ) 
(*This function computes the total scalar flux(In_flux+Up_flux)*)
tota[rp_, d1_] := (
  	
  ins = Sum[  (\[Delta]\[Phi]2[l, m, rp, d1][[
       1]])  m^2  (M/(rp)^3), {l, 1, 5}, {m, -l, +l}];
  
  ups = Sum[  (\[Delta]\[Phi]2[l, m, rp, d1][[
       2]])  m^2  (M/(rp)^3), {l, 1, 5}, {m, -l, +l}];
  
  Influx = 1/(32  \[Pi]) ins;
  Upflux = 1/(32  \[Pi])  ups;
  "up " 
   Evaluate[Upflux] ;
  "in " 
   Evaluate[Influx] ;
  
  
  (*total = Influx + Upflux;*)
  total = Upflux;
  total
  )

\[Delta]\[Phi]2[1, 1, 7`20, 0.3]
tota[6`20, 0.1][[1]]
	
 d1 = 0.3;
(*Crea i dati per il grafico*)
data = Table[{1/Sqrt[k], Log10[tota[k M, d1][[1]]]}, {k, 6, 69.5, 
    3}];
			
(*Plotta i dati*)
ListPlot[data]

 (*grafico degli scarti relativi prendendo come riferimento i \
risultati del toolkit:confronto i flussi *)
data = Table[{1/Sqrt[k], 
    100*(1/(d1*d1*(1/8)*ScalarFluxToolkit[SetPrecision[k, 30]])*
       Abs[tota[k M, d1][[1]] - 
         d1*d1*(1/8)*ScalarFluxToolkit[SetPrecision[k, 30]]])}, {k, 
    6 + (10^-9), 69.5, 3}];




















