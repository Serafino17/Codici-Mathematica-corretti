<< SpinWeightedSpheroidalHarmonics`
 << KerrGeodesics`
<< ReggeWheeler`
(* <<Teukolsky`*)

GravFlux1[r0_] := (
  tot = 0;
  
   orbit = KerrGeoOrbit[0, r0, 0, 1];
  Do[
    Do[
       mode = ReggeWheelerPointParticleMode[2, l, m, 0, orbit];
    	
    (*Estrarre un valore specifico all'interno di "Energy"*)
    energyI = mode["Fluxes"]["Energy"]["\[ScriptCapitalI]"]; 
    energyH = mode["Fluxes"]["Energy"]["\[ScriptCapitalH]"];
    
    tot = tot + (energyI +   energyH);
    (*Stampa i valori correnti di l e m*)
    (*Print["l = ",l,", m = ",m,", energyI = ",energyI,", energyH = ",
    energyH];*)
    	
    (* Print["l = ",l,", m = ",m];*)
    
    , {m, -l, l}
    	],
   {l, 2, 5}
   ];
  (*Aggiunto per debugging
  Print["Valore finale di tot: ",tot];
  *)
  tot
  )
	
GravFlux1[6.00000001`30]
(*Just give it a try
data=Table[{r,GravFlux1[SetPrecision[r,30]]},{r,7,65,3}]
ListPlot[data] *)

lmax = 5;
(*All mass values are fixed to 1*)   
 
M = 1;
mp = 1; 

(*These are the boundaries of the domain to integrate the homogeneous \
equation(for the scalar flux)*)

rfin = 1000;   
rin = 2 M + 10^-4;	

(*This function gives as output {In2,Up2}, where In2 is the squared \
modulus of the "ingoing" scalar perturbation while Up2 for the \
outgoing perturbation*)

rstar[r_] := r + 2 M Log[(r/(2 M)) - 1];
\[Delta]\[Phi]2[l_, m_, rp_, d_] := ( 
  	
  
  \[Omega]p = Sqrt[M/rp^3];
  \[Omega] = \[Omega]p;  
  
  (* Potential V(r)*)
  pot[r_] := (1 - 2 M/r)* (l (l + 1) + (2 M/r))/r^2; 
  
  eq1 = (1 - (2 M)/r)^2 D[y[r], {r, 2}] + (1 - (2 M)/r)*((2 M)/r^2)*
     D[y[r], r] + (\[Omega]^2 - pot[r]) y[r] ;
  
  (* Inward boundary conditions, a0 = 1 *) 
  a1 = ((1 + l (l + 1))/((1 - 4 M I \[Omega])*(2 M)));
  
  a2 = -((
    2 l + 3 l^2 + 2 l^3 + l^4 + 12 I M \[Omega] + 8 I l M \[Omega] + 
     8 I l^2 M \[Omega])/(
    16 M^2 (I + 2 M \[Omega]) (I + 4 M \[Omega])));
  
  
  iny[r_] := 
   Exp[- I \[Omega] rstar[r]]*(1 + a1 (r - 2 M) + a2 (r - 2 M)^2);
  
  a = iny[rin];
  b = D[iny[r], r] /. r -> rin ;
  sol1 = 
   NDSolve[{eq1 == 0, y[rin] == a, y'[rin] == b}, y, {r, rin, rfin}];
  y1[r_] := y[r] /. sol1;
  
  
  	
  (* Upward boundary conditions (b0=1) *)
  inz[r_] := 
   Exp[ I \[Omega] rstar[r]]*(1 + (I l (l + 1))/(2 \[Omega] r) + 
      1/r^2 (-((-2 l - l^2 + 2 l^3 + l^4 - 4 I M \[Omega])/(
         8 \[Omega]^2)))); 
  	
  c = inz[rfin]; 
  t = D[inz[r], r] /. r -> rfin;
  
  eq = (1 - (2 M)/r)^2 D[f[r], {r, 2}] + (1 - (2 M)/r)*((2 M)/r^2)*
     D[f[r], r] + (\[Omega]^2 - pot[r]) f[r] ; 
   
  sol2 = 
   NDSolve[{eq == 0, f[rfin] == c, f'[rfin] == t}, 
    f, {r, rin, rfin}];
  z1[r_] := f[r] /. sol2;
  
  (* Wronskian computation in r*)
  W[r_] := (1 - 2 M/r) ( D[z1[r], r] y1[r] - D[y1[r], r] z1[r]);
  (*il wronskiano Ã¨ costante*)
  
  J[r_] := - d mp ((4 \[Pi])/r^(3/2)) (Sqrt[r - 3 M]) LegendreP[l, m, 
     0] ;
  (*Procedo col calcolo del modulo quadro delle perturbazioni*)
  In1 = ( z1[r] J[r] 1/W[r])  /. r -> rp;
  In2 = (Abs[In1])^2;
  
  Upp = ( y1[r] J[r] 1/W[r]) /. r -> rp ;
  Up2 = (Abs[Upp])^2;
  
  (*Restituzione di una lista con i due valori*)
  {In2, Up2}
  ) 
(*This function computes the total scalar flux(In_flux+Up_flux)*)
tota[rp_, d_] := (
  	
  ins = Sum[(((2 l + 1) ((l - m)!))/(
      4 \[Pi]  ((l + m)!)))  (\[Delta]\[Phi]2[l, m, rp, d][[
       1]])  m^2  (M/(rp)^3), {l, 1, 5}, {m, -l, +l}];
  
  ups = Sum[ (((2 l + 1) ((l - m)!))/(
      4 \[Pi]  ((l + m)!)))  (\[Delta]\[Phi]2[l, m, rp, d][[
       2]])  m^2  (M/(rp)^3), {l, 1, 5}, {m, -l, +l}];
  
  Influx = 1/(32  \[Pi]) ins;
  Upflux = 1/(32  \[Pi])  ups;
  "up " 
   Evaluate[Upflux] ;
  "in " 
   Evaluate[Influx] ;
  
  
  (*total = Influx + Upflux;*)
  total = Upflux;
  total
  )
(*
s=0;n=0;k=0; 
ScalarFlux1[r0_]:=(
tot=0;
 orbit=KerrGeoOrbit[0,r0,0,1];
Do[
 Do[
mode=TeukolskyPointParticleMode[s,l,m,n,k,orbit];
(*Estrarre un valore specifico all'interno di \
"Energy"*)energyI=mode["Fluxes"]["Energy"]["\[ScriptCapitalI]"];\
energyH=mode["Fluxes"]["Energy"]["\[ScriptCapitalH]"];
	(*tot=tot+(energyI+   energyH);*)
tot=tot+(energyI);
,{m,-l, l}
	],
{l,1, 5}
];
tot
)
(1/8 )*0.3*0.3*ScalarFlux1[7`30]
*)
tota[7`30, 0.3][[1]]

(*Just to check if the routines above work *)
l3 = 2;
m3 = 1;
m4 = -1;
\[Delta]\[Phi]2[l3, m3, 10, 0.1]*(((2 l3 + 1) ((l3 - m3)!))/(
  4 \[Pi]  ((l3 + m3)!)))  m3^2  (M/(rp)^3)
\[Delta]\[Phi]2[l3, m4, 10, 0.1]*(((2 l3 + 1) ((l3 - m4)!))/(
  4 \[Pi]  ((l3 + m4)!)))  m4^2  (M/(rp)^3)
tota[6`30, 0.3][[1]]

(* Finally we are able to evaluate the orbital evolution of the SCO \
with the computation of r(t) and \[CurlyPhi](t) *)
	
GravFlux1[SetPrecision[7, 30]] + tota[7`30, 0.3][[1]]
	
dataflux = 
  Table[{r1, GravFlux1[SetPrecision[r1, 30]] + tota[r1, 0.3][[1]]
       }, {r1, 6.000000001, 65, 5}];
ListPlot[dataflux]

 d1 = 0.3;
(*Crea i dati per il grafico*)
data = Table[{1/Sqrt[k], Log10[tota[k M, d1][[1]]]}, {k, 6, 69.5, 
    3}];

(*Plotta i dati*)
ListPlot[data]

(* Building the intepolated function *) 
EnergyFlux = Interpolation[dataflux]
Plot[EnergyFlux[r], {r, 7, 65}, PlotRange -> All]

(*Eorbit is the energy of a massive point-particle in geodetic motion \
on a equatorial circular orbit*)
Eorbit[r_] := mp (1 - (2 M)/r)/Sqrt[1 - (3 M)/r]; 
Plot[Evaluate[Eorbit[r]], {r, 7 M, 65  M}, PlotRange -> All]

DEorbit[r_] := D[Eorbit[r], r];

Plot[Evaluate[DEorbit[r]], {r, 7 M, 65  M}, PlotRange -> All]
Plot[EnergyFlux[r], {r, 7, 65}, PlotRange -> All]

(*Integration of the diffrential equation for r(t) *)

eq = r'[t1] + EnergyFlux[r[t1]]/DEorbit[r[t1]];
	

sol = NDSolve[{eq == 0, r[0] == 65 M}, r, {t1, 0, 3.40541862*10^5}]
Plot[Evaluate[r[t1] /. sol], {t1, 0, 3.40541862*10^5}, 
 PlotRange -> All]
		
(*Define a function sol_r[t]*)
solr[t1_] := (r[t1] /. sol)[[1]]
solr[t1] /. t1 -> 3.40541862*10^5

(* Differential equation for phi(t)*)
eq1 = \[CurlyPhi]'[t1] - Sqrt[M]/(solr[t1])^(3/2); 

sol1 = NDSolve[{eq1 == 0, \[CurlyPhi][0] == 0}, \[CurlyPhi], {t1, 0, 
   3.40541862*10^5
   }]
Plot[Evaluate[\[CurlyPhi][t1] /. sol1], {t1, 0, 3.40541862*10^5
  	}, PlotRange -> All]   

GravFlux3[r0_] := (
  tot3 = 0;
  
   orbit = KerrGeoOrbit[0, r0, 0, 1];
  Do[
    Do[
       mode3 = TeukolskyPointParticleMode[-2, l, m, 0, 0, orbit];
    	
    (*Estrarre un valore specifico all'interno di "Energy"*)
    energyI3 = mode3["Fluxes"]["Energy"]["\[ScriptCapitalI]"]; 
    energyH3 = mode3["Fluxes"]["Energy"]["\[ScriptCapitalH]"];
    
    tot3 = tot3 + (energyI3 +   energyH3);
    (*Stampa i valori correnti di l e m*)
    (*Print["l = ",l,", m = ",m,", energyI = ",energyI,", energyH = ",
    energyH];*)
    	
    (* Print["l = ",l,", m = ",m];*)
    
    , {m, -l, l}
    	],
   {l, 2, 5}
   ];
  (*Aggiunto per debugging
  Print["Valore finale di tot: ",tot];
  *)
  tot3
  )






